<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
         http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-4.0.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
         http://www.springframework.org/schema/aop 
         http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

	

	<!-- 自动管理Bean -->
	<!-- <context:component-scan base-package="com.park*" /> -->
	

	<!-- 数据连接配置 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				 <value>/WEB-INF/config/properties/jdbc.properties</value> 
				 <value>/WEB-INF/config/properties/application.properties</value>
				 <value>/WEB-INF/config/properties/mongodb.properties</value>
				 <!--<value>D:/android/AndroidProject/intimes_app/webapp/WEB-INF/config/properties/jdbc.properties</value>-->
			</list>
		</property>
	</bean>

	
	<bean id="dataSource_master" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">   
    <!-- 基本属性 url、user、password -->  
    <property name="url" value="${jdbc.url}" />  
    <property name="username" value="${jdbc.username}" />  
    <property name="password" value="${jdbc.password}" />  
        
    <!-- 配置初始化大小、最小、最大 -->  
    <property name="initialSize" value="5" />  
    <property name="minIdle" value="${jdbc.minIdle}" />   
    <property name="maxActive" value="${jdbc.maxActive}" />  
   
    <!-- 配置获取连接等待超时的时间 -->  
    <property name="maxWait" value="60000" />  
   
    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
    <property name="timeBetweenEvictionRunsMillis" value="60000" />  
   
    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
    <property name="minEvictableIdleTimeMillis" value="300000" />  
    
    <property name="validationQuery" value="SELECT 'x'" />  
    <property name="testWhileIdle" value="true" />  
    <property name="testOnBorrow" value="false" />  
    <property name="testOnReturn" value="false" />  
   
    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->  
    <property name="poolPreparedStatements" value="true" />
    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
   	<!-- 超过时间限制是否回收 -->  
	<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
	<!-- 超时时间；单位为秒。180秒=3分钟 -->  
	<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
	<!-- 关闭abanded连接时输出错误日志 -->  
	<property name="logAbandoned" value="${jdbc.logAbandoned}" />
    <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
    <property name="filters" value="stat" />
    </bean>  

	
	<bean id="dataSource_slave" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">   
    <!-- 基本属性 url、user、password -->  
    <property name="url" value="${jdbc_slave1.url}" />  
    <property name="username" value="${jdbc_slave1.username}" />  
    <property name="password" value="${jdbc_slave1.password}" />  
        
    <!-- 配置初始化大小、最小、最大 -->  
    <property name="initialSize" value="5" />  
    <property name="minIdle" value="${jdbc_slave1.minIdle}" />   
    <property name="maxActive" value="${jdbc_slave1.maxActive}" />  
   
    <!-- 配置获取连接等待超时的时间 -->  
    <property name="maxWait" value="60000" />  
   
    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
    <property name="timeBetweenEvictionRunsMillis" value="60000" />  
   
    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
    <property name="minEvictableIdleTimeMillis" value="300000" />  
    
    <property name="validationQuery" value="SELECT 'x'" />  
    <property name="testWhileIdle" value="true" />  
    <property name="testOnBorrow" value="false" />  
    <property name="testOnReturn" value="false" />  
   
    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->  
    <property name="poolPreparedStatements" value="true" />
    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

	<!-- 超过时间限制是否回收 -->  
	<property name="removeAbandoned" value="${jdbc_slave1.removeAbandoned}" />  
	<!-- 超时时间；单位为秒。180秒=3分钟 -->  
	<property name="removeAbandonedTimeout" value="${jdbc_slave1.removeAbandonedTimeout}" />  
	<!-- 关闭abanded连接时输出错误日志 -->  
	<property name="logAbandoned" value="${jdbc_slave1.logAbandoned}" /> 
	
	
    <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->  
    <property name="filters" value="stat" />   
    </bean>  

	
	<!-- 定义数据源，使用自己实现的数据源 -->  
    <bean id="dataSource" class="com.park.DataSource.DynamicDataSource">  
        <!-- 设置默认的数据源，这里默认走写库 -->  
        <property name="defaultTargetDataSource" ref="dataSource_master"/> 
        <!-- 设置多个数据源 -->  
        <property name="targetDataSources">  
            <map key-type="java.lang.String">  
                <!-- 这个key需要和程序中的key一致 -->  
                <entry key="master" value-ref="dataSource_master"/>  
                <entry key="slave" value-ref="dataSource_slave"/>  
            </map>  
        </property>  
 
    </bean>  
	
	
	
	<!-- NamedParameterJdbcTemplate -->
	<bean id="jdbc" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>
	<!-- 事物管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 支持@Transactional 标记  --> 
	<tx:annotation-driven  transaction-manager="transactionManager"   proxy-target-class="true" />
	<!-- 支持@AspectJ 标记 <aop:aspectj-autoproxy /> 	<aop:config proxy-target-class="true"></aop:config>  
	-->
	<!-- 定义AOP切面处理器 <bean class="com.park.DataSource.DataSourceAspect" id="dataSourceAspect" />   -->  
    
    
    <aop:aspectj-autoproxy />
	
	
	<!-- 
	
	
	<tx:advice id="userTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="del*" propagation="REQUIRED" read-only="false" rollback-for="com.wradio.exception.WradioException" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="com.wradio.exception.WradioException" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="com.wradio.exception.WradioException" />
			<tx:method name="create*" propagation="REQUIRED" read-only="false" rollback-for="com.wradio.exception.WradioException" />
			<tx:method name="modify*" propagation="REQUIRED" read-only="false" rollback-for="com.wradio.exception.WradioException" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="com.wradio.exception.WradioException" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config proxy-target-class="true">
		<aop:pointcut id="pc"
			expression="execution(* com.wradio.biz.*.*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice" />
	</aop:config>
	 -->	
<!-- 
<bean id= "facadeMonitoringAdvisor" class="net.bull.javamelody.MonitoringSpringAdvisor" >  
         <property name ="pointcut" >  
                 <bean class="org.springframework.aop.support.JdkRegexpMethodPointcut" >  
                         <property name ="pattern" value="com.park.*" />
                 </bean>  
         </property>  
</bean>
 -->

</beans>
